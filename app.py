import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
from datetime import datetime, time, timedelta, date

# --- C·∫•u h√¨nh trang (T√πy ch·ªçn) ---
st.set_page_config(
    page_title="D·ª± ƒëo√°n th·ªùi gian giao ƒë·ªì ƒÉn",
    page_icon="üç≤",
    layout="centered",
    initial_sidebar_state="auto"
)

# --- H√†m t·∫£i m√¥ h√¨nh v√† preprocessor ---
# S·ª≠ d·ª•ng cache ƒë·ªÉ tr√°nh t·∫£i l·∫°i m·ªói l·∫ßn t∆∞∆°ng t√°c
@st.cache_resource # D√πng cache_resource cho c√°c ƒë·ªëi t∆∞·ª£ng l·ªõn nh∆∞ model
def load_resources(model_path, preprocessor_path):
    if not os.path.exists(model_path):
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file m√¥ h√¨nh t·∫°i '{model_path}'")
        return None, None
    if not os.path.exists(preprocessor_path):
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file preprocessor t·∫°i '{preprocessor_path}'")
        return None, None
    try:
        model = joblib.load(model_path)
        preprocessor = joblib.load(preprocessor_path)
        st.success("ƒê√£ t·∫£i th√†nh c√¥ng m√¥ h√¨nh v√† preprocessor!")
        return model, preprocessor
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i t√†i nguy√™n: {e}")
        return None, None

# --- ƒê∆∞·ªùng d·∫´n t·ªõi file ƒë√£ l∆∞u ---
MODEL_PATH = 'food_delivery_model.joblib'
PREPROCESSOR_PATH = 'food_delivery_preprocessor.joblib'

# --- T·∫£i t√†i nguy√™n ---
model, preprocessor = load_resources(MODEL_PATH, PREPROCESSOR_PATH)

# --- Giao di·ªán ng∆∞·ªùi d√πng Streamlit ---
st.title("üç≤ D·ª∞ ƒêO√ÅN TH·ªúI GIAN GIAO ƒê·ªí ƒÇN")
st.markdown("""
Nh·∫≠p c√°c th√¥ng tin v·ªÅ ƒë∆°n h√†ng v√† ƒëi·ªÅu ki·ªán giao h√†ng ƒë·ªÉ d·ª± ƒëo√°n th·ªùi gian giao h√†ng d·ª± ki·∫øn (t√≠nh b·∫±ng ph√∫t).
""")

# --- Ch·ªâ hi·ªÉn th·ªã giao di·ªán nh·∫≠p li·ªáu n·∫øu t·∫£i t√†i nguy√™n th√†nh c√¥ng ---
if model is not None and preprocessor is not None:

    # --- T·∫°o c√°c input widgets ---
    # S·ª≠ d·ª•ng c√°c c·ªôt g·ªëc m√† preprocessor ƒë√£ h·ªçc

    # T·∫°o 2 c·ªôt ƒë·ªÉ b·ªë tr√≠ g·ªçn g√†ng h∆°n (t√πy ch·ªçn)
    col1, col2 = st.columns(2)

    with col1:
        distance = st.number_input("Kho·∫£ng c√°ch giao h√†ng (km)", min_value=0.1, max_value=50.0, value=5.0, step=0.1, format="%.1f")
        prep_time = st.number_input("Th·ªùi gian chu·∫©n b·ªã ƒë∆°n (ph√∫t)", min_value=5, max_value=60, value=15, step=1)
        weather_options = ['Clear', 'Foggy', 'Rainy', 'Snowy', 'Windy']
        weather = st.selectbox("ƒêi·ªÅu ki·ªán th·ªùi ti·∫øt", options=weather_options, index=0)
        traffic_options = ['Low', 'Medium', 'High']
        traffic = st.selectbox("M·ª©c ƒë·ªô giao th√¥ng", options=traffic_options, index=1)

    with col2:
        courier_exp = st.number_input("Kinh nghi·ªám ng∆∞·ªùi giao h√†ng (nƒÉm)", min_value=0, max_value=30, value=2, step=1)

        time_options = ['Morning', 'Afternoon', 'Evening', 'Night']
        time_of_day = st.selectbox("Kho·∫£ng th·ªùi gian giao h√†ng", options=time_options, index=1)

        vehicle_options = ['Bike', 'Scooter', 'Car']
        vehicle_type = st.selectbox("Lo·∫°i ph∆∞∆°ng ti·ªán", options=vehicle_options, index=1)

        # --- TH√äM INPUT TH·ªúI GIAN ƒê·∫∂T H√ÄNG ---
        # K·∫øt h·ª£p now() v√† time() ƒë·ªÉ l·∫•y ƒë√∫ng ki·ªÉu time
        default_order_time = datetime.now().time().replace(second=0, microsecond=0)
        order_time_input = st.time_input("Gi·ªù ƒë·∫∑t h√†ng", value=default_order_time)

    # --- N√∫t d·ª± ƒëo√°n ---
    predict_button = st.button("D·ª± ƒëo√°n", type="primary")

    if predict_button:
        input_data = {
            'Distance_km': distance,
            'Weather': weather,
            'Traffic_Level': traffic,
            'Time_of_Day': time_of_day,
            'Vehicle_Type': vehicle_type,
            'Preparation_Time_min': prep_time,
            'Courier_Experience_yrs': courier_exp,
        }

        # L·∫•y danh s√°ch t√™n c·ªôt g·ªëc m√† preprocessor ƒë√£ h·ªçc
        original_cols = ['Distance_km', 'Preparation_Time_min', 'Courier_Experience_yrs',
                         'Weather', 'Traffic_Level', 'Time_of_Day', 'Vehicle_Type']
        # Ki·ªÉm tra xem c√≥ c·ªôt n√†o thi·∫øu trong input_data kh√¥ng
        missing_cols = [col for col in original_cols if col not in input_data]
        if missing_cols:
            st.warning(f"Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o cho c√°c c·ªôt: {missing_cols}. S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh ho·∫∑c ki·ªÉm tra l·∫°i code.")

        # T·∫°o DataFrame t·ª´ input (ch·ªâ 1 h√†ng)
        # ƒê·∫£m b·∫£o th·ª© t·ª± c·ªôt kh·ªõp v·ªõi l√∫c fit preprocessor n·∫øu preprocessor kh√¥ng t·ª± x·ª≠ l√Ω
        else:
            try:
                input_df = pd.DataFrame([input_data], columns=original_cols)
                st.write("D·ªØ li·ªáu ƒë·∫ßu v√†o:")
                st.dataframe(input_df)

                # --- Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu input ---
                input_processed = preprocessor.transform(input_df)

                # --- D·ª± ƒëo√°n ---
                prediction = model.predict(input_processed)
                predicted_time = round(prediction[0], 1) # L·∫•y k·∫øt qu·∫£ ƒë·∫ßu ti√™n v√† l√†m tr√≤n

                # --- T√çNH TO√ÅN T·ªîNG TH·ªúI GIAN T·ª™ L√öC ƒê·∫∂T ƒê·∫æN L√öC GIAO ---
                total_estimated_duration = prep_time + predicted_time

                # --- Hi·ªÉn th·ªã T·ªîNG TH·ªúI GIAN d·ª± ƒëo√°n ---
                st.subheader("K·∫øt qu·∫£ d·ª± ƒëo√°n:")
                st.info(f"**T·ªïng th·ªùi gian d·ª± ki·∫øn c·∫ßn thi·∫øt:** {total_estimated_duration} ph√∫t")  # Duration

                # --- T√çNH TO√ÅN GI·ªú NH·∫¨N H√ÄNG D·ª∞ KI·∫æN (ETA) ---
                try:
                    current_date = date.today()
                    # K·∫øt h·ª£p ng√†y v√† gi·ªù ƒë·∫∑t h√†ng th√†nh ƒë·ªëi t∆∞·ª£ng datetime
                    order_datetime = datetime.combine(current_date, order_time_input)

                    # T·∫°o ƒë·ªëi t∆∞·ª£ng timedelta (kho·∫£ng th·ªùi gian) t·ª´ s·ªë ph√∫t
                    prep_timedelta = timedelta(minutes=prep_time)
                    delivery_timedelta = timedelta(minutes=predicted_time)

                    # T√≠nh gi·ªù nh·∫≠n h√†ng d·ª± ki·∫øn
                    estimated_arrival_datetime = order_datetime + prep_timedelta + delivery_timedelta

                    # --- Hi·ªÉn th·ªã GI·ªú NH·∫¨N H√ÄNG d·ª± ki·∫øn ---
                    st.success(
                        f"**Th·ªùi ƒëi·ªÉm nh·∫≠n h√†ng d·ª± ki·∫øn:** {estimated_arrival_datetime.strftime('%H:%M ng√†y %d/%m/%Y')}")  # ETA

                except Exception as calc_e:
                    st.error(f"L·ªói khi t√≠nh to√°n th·ªùi ƒëi·ªÉm nh·∫≠n h√†ng: {calc_e}")
                    st.write("Ki·ªÉm tra l·∫°i gi√° tr·ªã ng√†y/gi·ªù ƒë·∫∑t h√†ng.")

            except Exception as e:
                st.error(f"L·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω ho·∫∑c d·ª± ƒëo√°n: {e}")
                st.error("Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu ƒë·∫ßu v√†o v√† c·∫•u h√¨nh.")

else:
    st.warning("Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh ho·∫∑c preprocessor. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c file .joblib v√† ƒë∆∞·ªùng d·∫´n.")